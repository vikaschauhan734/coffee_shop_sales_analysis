create table sales (transaction_id INT,
					transaction_date DATE,
					transaction_time TIME,
					transaction_qty INT,
					store_id INT,
					store_location VARCHAR,
					product_id INT,
					unit_price FLOAT,
					product_category VARCHAR,
					product_type VARCHAR,
					product_detail VARCHAR);

copy sales from 'D:\projects\cuvatte\final_evaluation\sql\Coffee Shop Sales.csv' delimiter ',' csv header;

-- Question 1
-- Top 5 Most Frequently Sold Products by Category
-- Retrieve the top 5 products with the highest sales frequency for each product category.

select * from
(select product_category, product_id, sales_count, row_number() over (partition by product_category order by sales_count desc) as rank
from (select product_category, product_id, count(product_id) as sales_count from sales 
	group by product_category, product_id order by sales_count desc))
	where rank <=5;


-- Question 2
-- Total Revenue by Store in January 2023
-- Calculate the total revenue generated by each store during January 2023.

-- For store_location
select store_location, sum(revenue) as total_revenue from
(select store_location, transaction_qty, unit_price, (transaction_qty * unit_price) as revenue 
	from sales where transaction_date between '2023-01-01' and '2023-01-31')
group by store_location order by total_revenue desc;

-- For store_id
select store_id, sum(revenue) as total_revenue from
(select store_id, transaction_qty, unit_price, (transaction_qty * unit_price) as revenue 
	from sales where transaction_date between '2023-01-01' and '2023-01-31')
group by store_id order by total_revenue desc;


-- Question 3
-- Unique Product Types in 'Lower Manhattan' Store
-- List all unique product types that were sold in the store located in 'Lower Manhattan'.

select distinct(product_type) from sales where store_location = 'Lower Manhattan';


-- Question 4
-- Transactions Before 12:00 PM
-- Calculate the total number of transactions that occurred before 12:00 PM on any given day.

select count(distinct(transaction_id)) as total_transactions from sales where transaction_time < '12:00:00';


-- Question 5
-- Average Revenue Per Transaction During Peak and Non-Peak Hours
-- Calculate the average revenue per transaction for each product category during 
-- peak hours (7 AM - 9 AM) and non-peak hours, broken down by each store.

select store_location, product_category,
	avg(case when transaction_time between '07:00:00' and '09:00:00' then revenue end) as avg_revenue_peak,
	avg(case when transaction_time not between '07:00:00' and '09:00:00' then revenue end) as avg_revenue_non_peak
	from (select store_location, product_category, transaction_time, (transaction_qty * unit_price) as revenue 
	from sales) group by store_location, product_category;


-- Question 6
-- Product with Most Price Fluctuations
-- Retrieve the product that experienced the largest price fluctuations (i.e., the difference between the highest and lowest price)
-- across all transactions.

select product_id, (max(unit_price) - min(unit_price)) as largest_price_fluctuation 
from sales group by product_id order by largest_price_fluctuation desc limit 1;


-- Question 7
-- Product Sold in Every Store
-- List all products that were sold in every store at least once.

select product_id from
	(select product_id, count(product_id) as count
	from (select store_location, product_id from sales group by store_location, product_id)
	group by product_id having count(product_id) >= 3);


-- Question 8
-- Top 5 Days with Largest Deviation from Average Daily Transaction Quantity
-- Identify the top 5 days where the total transaction quantity deviated the most from the average daily transaction quantity.

select transaction_date, total_transaction,
	abs(total_transaction - (select avg(total_transaction) as average_transaction from 
(select transaction_date, sum(transaction_qty) total_transaction from sales group by transaction_date))) as deviation
from (select transaction_date, sum(transaction_qty) total_transaction from sales group by transaction_date)
	order by deviation desc limit 5;


-- Question 9
-- Stores with Average Unit Price Greater Than $2.50
-- Retrieve the store location and total revenue for each store where the average unit price is greater than $2.50.

select store_location, sum(revenue) as total_revenue
from (select store_location, (transaction_qty * unit_price) as revenue,
	avg(unit_price) over (partition by store_location) as average_unit_price
	from sales)
	where average_unit_price > 2.50 group by store_location;

-- If you want to see average_unit_price also
select store_location, average_unit_price, sum(revenue) as total_revenue
from (select store_location, (transaction_qty * unit_price) as revenue,
	avg(unit_price) over (partition by store_location) as average_unit_price
	from sales)
	where average_unit_price > 2.50 group by store_location, average_unit_price;


-- Question 10
-- Product with Highest Average Sales Quantity Per Transaction in Each Store
-- Identify the product with the highest average sales quantity per transaction in each store.

select store_location, product_id, average 
	from (select store_location, product_id, avg(transaction_qty) as average from sales group by store_location, product_id)
	where average in (select max(average) 
from (select store_location, product_id, avg(transaction_qty) as average from sales group by store_location, product_id)
group by store_location);

-- Alternate Way
select store_location, product_id, average
	from (select store_location, product_id, average, row_number() over (partition by store_location order by average desc) as rank
	from (select store_location, product_id, avg(transaction_qty) as average from sales group by store_location, product_id))
	where rank = 1;



